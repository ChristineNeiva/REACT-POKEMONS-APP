{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","Date","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","pokemon","borderColor","useState","setColor","history","useHistory","className","onClick","id","push","onMouseEnter","onMouseLeave","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","data","isEmpty","result","forEach","method","body","JSON","stringify","headers","index","findIndex","filter","term","includes","Object","keys","length","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","searchPokemon","handleInputChange","to","PokemonList","useEffect","getPokemons","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","getPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","isValid","form","setForm","hasType","fieldName","fieldValue","newField","addPokemon","updatePokemon","isAddForm","validateForm","newForm","startsWith","endsWith","test","isTypeValid","onSubmit","preventDefault","handleSubmit","deletePokemon","htmlFor","marginBottom","disabled","checked","concat","currentType","selectType","PokemonEdit","Pokemon","PokemonAdd","getTime","AuthenticationService","username","password","isAuthenticated","setTimeout","Login","message","setMessage","login","PrivateRoute","Component","component","rest","render","props","pathname","App","exact","path","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d498cb24.chunk.js","sourcesContent":["const formatDate = (date: Date = new Date()): string => {\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\n}\n\nexport default formatDate;","const formatType = (type: string): string => {\n    let color: string;\n    switch (type) {\n        case 'Feu': \n            color = 'red lighten-1'; \n            break; \n        case 'Eau': \n            color = 'blue lighten-1'; \n            break; \n        case 'Plante': \n            color = 'green lighten-1'; \n            break; \n        case 'Insecte': \n            color = 'brown lighten-1'; \n            break; \n        case 'Normal': \n            color = 'grey lighten-3'; \n            break; \n        case 'Vol': \n            color = 'blue lighten-3'; \n            break; \n        case 'Poison': \n            color = 'deep-purple accent-1'; \n            break; \n        case 'Fée': \n            color = 'pink lighten-4'; \n            break; \n        case 'Psy': \n            color = 'deep-purple darken-2'; \n            break; \n        case 'Electrik': \n            color = 'lime accent-1'; \n            break; \n        case 'Combat': \n            color = 'deep-orange'; \n            break; \n        default: \n            color = 'grey'; \n            break; \n    }\n    return `chip ${color}`;\n}\n\nexport default formatType;","import React, { FunctionComponent, useState } from \"react\";\nimport Pokemon from \"../models/pokemon\";\nimport './pokemon-card.css';\nimport formatDate from \"../helpers/format-date\";\nimport formatType from \"../helpers/format-type\";\nimport { useHistory } from 'react-router-dom';\n\ntype Props = {\n    pokemon: Pokemon\n    borderColor?: string\n};\n\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor ='#009688'}) => {\n    \n    const [color, setColor] = useState<string>();\n    const history = useHistory();\n    \n    const showBorder = () => {\n        setColor(borderColor);\n    }\n\n    const hideBorder = () => {\n        setColor('#f5f5f5');\n    }\n\n    const goToPokemon = (id: number) => {\n        history.push(`/pokemons/${id}`);\n    }\n\n    return (\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\n            <div className=\"card horizontal\" style={{ borderColor: color }}>\n                <div className=\"card-image\"> \n                    <img src={pokemon.picture} alt={pokemon.name}/>\n                </div>\n                <div className=\"card-stacked\">\n                    <div className=\"card-content\">\n                        <p>{pokemon.name}</p>\n                        <p><small>{formatDate(pokemon.created)}</small></p>\n                        {pokemon.types.map(type => (\n                            <span key={type} className={formatType(type)}>{type}</span>\n                        ))}\n                    </div>\n                </div>\n            </div> \n        </div>\n    );\n}\n\nexport default PokemonCard;","// Données de Pokemons\n\nimport Pokemon from './pokemon';\n   \nexport const POKEMONS: Pokemon[] = [\n    {\n        id: 1,\n        name: \"Bulbizarre\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\n        types: [\"Plante\", \"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 2,\n        name: \"Salamèche\",\n        hp: 28,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    },\n    {\n        id: 3,\n        name: \"Carapuce\",\n        hp: 21,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\n        types: [\"Eau\"],\n        created: new Date()\n    },\n    {\n        id: 4,\n        name: \"Aspicot\",\n        hp: 16,\n        cp: 2,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\n        types: [\"Insecte\", \"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 5,\n        name: \"Roucool\",\n        hp: 30,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\n        types: [\"Normal\", \"Vol\"],\n        created: new Date()\n    },\n    {\n        id: 6,\n        name: \"Rattata\",\n        hp: 18,\n        cp: 6,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 7,\n        name: \"Piafabec\",\n        hp: 14,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\n        types: [\"Normal\", \"Vol\"],\n        created: new Date()\n    },\n    {\n        id: 8,\n        name: \"Abo\",\n        hp: 16,\n        cp: 4,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\n        types: [\"Poison\"],\n        created: new Date()\n    },\n    {\n        id: 9,\n        name: \"Pikachu\",\n        hp: 21,\n        cp: 7,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\n        types: [\"Electrik\"],\n        created: new Date()\n    },\n    {\n        id: 10,\n        name: \"Sabelette\",\n        hp: 19,\n        cp: 3,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\n        types: [\"Normal\"],\n        created: new Date()\n    },\n    {\n        id: 11,\n        name: \"Mélofée\",\n        hp: 25,\n        cp: 5,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\n        types: [\"Fée\"],\n        created: new Date()\n    },\n    {\n        id: 12,\n        name: \"Groupix\",\n        hp: 17,\n        cp: 8,\n        picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\n        types: [\"Feu\"],\n        created: new Date()\n    }\n];\n  \nexport default POKEMONS;","import Pokemon from \"../models/pokemon\";\nimport POKEMONS from \"../models/mock-pokemon\";\n  \nexport default class PokemonService {\n  \n    static pokemons:Pokemon[] = POKEMONS;\n    \n    // Si environnement de Dev simule l'API Rest\n    static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\n    \n    static getPokemons(): Promise<Pokemon[]> {\n        if(this.isDev) {\n            return fetch('http://localhost:3001/pokemons')\n            .then(response => response.json())\n            .catch(error => this.handleError(error));\n        }\n        return new Promise(resolve => {\n            resolve(this.pokemons);\n        });\n    }\n  \n    static getPokemon(id: number): Promise<Pokemon|null> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons/${id}`)\n            .then(response => response.json())\n            .then(data => this.isEmpty(data) ? null : data)\n            .catch(error => this.handleError(error));\n        }\n        return new Promise(resolve => {\n            // A la place de la fonction find car erreur dessus\n            let result = null; \n            this.pokemons.forEach(pokemon => {\n                if(pokemon.id === id) {\n                    result = pokemon;\n                }\n            })\n            resolve(result);\n            // resolve(this.pokemons.find(pokemon => id === pokemon.id));\n        }); \n    }\n  \n    static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n                method: 'PUT',\n                body: JSON.stringify(pokemon),\n                headers: { 'Content-Type': 'application/json'}\n            })\n            .then(response => response.json())\n            .catch(error => this.handleError(error));\n        }\n        return new Promise(resolve => {\n            const { id } = pokemon;\n            const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n            this.pokemons[index] = pokemon;\n            resolve(pokemon);\n        }); \n    }\n  \n    static deletePokemon(pokemon: Pokemon): Promise<{}> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n                method: 'DELETE',\n                headers: { 'Content-Type': 'application/json'}\n            })\n            .then(response => response.json())\n            .catch(error => this.handleError(error));\n        }\n        return new Promise(resolve => {    \n            const { id } = pokemon;\n            this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n            resolve({});\n        }); \n    }\n  \n    static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n        pokemon.created = new Date(pokemon.created);\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons`, {\n                method: 'POST',\n                body: JSON.stringify(pokemon),\n                headers: { 'Content-Type': 'application/json'}\n            })\n            .then(response => response.json())\n            .catch(error => this.handleError(error));\n        }\n        return new Promise(resolve => {    \n            this.pokemons.push(pokemon);\n            resolve(pokemon);\n        }); \n    }\n  \n    static searchPokemon(term: string): Promise<Pokemon[]> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons?q=${term}`)\n            .then(response => response.json())\n            .catch(error => this.handleError(error));\n        }\n        return new Promise(resolve => {    \n            const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\n            resolve(results);\n        });\n    }\n  \n    static isEmpty(data: Object): boolean {\n        return Object.keys(data).length === 0;\n    }\n  \n    static handleError(error: Error): void {\n        console.error(error);\n    }\n}","import React, { FunctionComponent, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n \nconst PokemonSearch: FunctionComponent = () => {\n  \n    const [term, setTerm] = useState<string>('');\n    const [pokemons, setPokemons] = useState<Pokemon[]>([]);\n    \n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const term = e.target.value;\n        setTerm(term);\n    \n        if(term.length <= 1) {\n            setPokemons([]);\n            return;\n        }\n    \n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\n    }\n    \n    return (\n        <div className=\"row\"> \n            <div className=\"col s12 m6 offset-m3\"> \n                <div className=\"card\"> \n                    <div className=\"card-content\"> \n                        <div className=\"input-field\"> \n                            <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \n                        </div> \n                        <div className='collection'>\n                            {pokemons.map((pokemon) => (\n                            <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n                                {pokemon.name}\n                            </Link>\n                            ))}\n                        </div> \n                    </div> \n                </div> \n            </div> \n        </div>\n    );\n}\n  \nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport Pokemon from '../models/pokemon';\n// import POKEMONS from '../models/mock-pokemon';\nimport PokemonCard from '../components/pokemon-card';\nimport PokemonService from '../services/pokemon-service';\nimport { Link } from 'react-router-dom';\nimport PokemonSearch from '../components/pokemon-search';\n  \nconst PokemonList: FunctionComponent = () => {\n  \tconst [pokemons, setPokemons] = useState<Pokemon[]>([]);\n  \n  \tuseEffect(() => {\n\t\t// setPokemons(POKEMONS);\n\t\t// Appel a l'API \n\t\tPokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\n\t}, []);\n  \n\treturn (\n\t\t<div>\n\t\t\t<h1 className='center'>Pokédex</h1>\n\t\t\t<div className=\"container\"> \n\t\t\t\t<div className=\"row\"> \n\t\t\t\t\t<PokemonSearch />\n\t\t\t\t\t{pokemons.map(pokemon => (\n\t\t\t\t\t\t<PokemonCard key={pokemon.id} pokemon={pokemon} />\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<Link className='btn-floating btn-large waves-effect waves-light red z-depth-3'\n\t\t\t\t\tstyle={{position: 'fixed', bottom: '25px', right: '25px'}}\n\t\t\t\t\tto='/pokemons/add'>\n\t\t\t\t\t\t<i className='material-icons'>add</i>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t</div> \n\t);\n}\n  \nexport default PokemonList;","import React, { FunctionComponent } from 'react';\n  \nconst Loader: FunctionComponent = () => {\n   \n    return (\n        <div className=\"preloader-wrapper big active\"> \n            <div className=\"spinner-layer spinner-blue\"> \n                <div className=\"circle-clipper left\"> \n                    <div className=\"circle\"></div> \n                </div>\n                <div className=\"gap-patch\"> \n                    <div className=\"circle\"></div> \n                </div>\n                <div className=\"circle-clipper right\"> \n                    <div className=\"circle\"></div> \n                </div>\n            </div> \n        </div> \n    );\n}\n   \nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps, Link } from 'react-router-dom';\nimport Pokemon from '../models/pokemon';\n// import POKEMONS from '../models/mock-pokemon';\nimport formatDate from '../helpers/format-date';\nimport formatType from '../helpers/format-type';\nimport PokemonService from '../services/pokemon-service';\nimport Loader from '../components/loader';\n  \ntype Params = { id: string };\n  \nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n\n    // L'objet est soit un Pokemon soit Null\n    const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n    useEffect(() => {\n        // Boucle qui permet de récupérer le pokemon avec l'id passé en paramètre\n        // POKEMONS.forEach(pokemon => {\n        //     if (match.params.id === pokemon.id.toString()) {\n        //         setPokemon(pokemon);\n        //     }\n        // })\n        // API Rest\n        // Le + devant l'id permet de convertir une string en int\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n    }, [match.params.id]);\n    \n    return (\n        <div>\n            { pokemon ? (\n                <div className=\"row\">\n                    <div className=\"col s12 m8 offset-m2\"> \n                        <h2 className=\"header center\">{ pokemon.name }</h2>\n                        <div className=\"card hoverable\"> \n                            <div className=\"card-image\">\n                                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                                <Link to={`/pokemons/edit/${pokemon.id}`} className='btn btn-floating halfway-fab waves-effect waves-light'>\n                                    <i className='material-icons'>edit</i>\n                                </Link>\n                            </div>\n                            <div className=\"card-stacked\">\n                                <div className=\"card-content\">\n                                    <table className=\"bordered striped\">\n                                        <tbody>\n                                            <tr> \n                                                <td>Nom</td> \n                                                <td><strong>{ pokemon.name }</strong></td> \n                                            </tr>\n                                            <tr> \n                                                <td>Points de vie</td> \n                                                <td><strong>{ pokemon.hp }</strong></td> \n                                            </tr> \n                                            <tr> \n                                                <td>Dégâts</td> \n                                                <td><strong>{ pokemon.cp }</strong></td> \n                                            </tr> \n                                            <tr> \n                                                <td>Types</td> \n                                                <td>\n                                                    {pokemon.types.map(type => (\n                                                        <span key={type} className={formatType(type)}>{type}</span>\n                                                    ))}\n                                                </td> \n                                            </tr> \n                                            <tr> \n                                                <td>Date de création</td> \n                                                <td>{formatDate(pokemon.created)}</td> \n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                                <div className=\"card-action\">\n                                    <Link to=\"/\">Retour</Link>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <h4 className=\"center\"><Loader /></h4>\n            )}\n        </div>\n    );\n}\n  \nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\nimport { Link } from 'react-router-dom';\n  \nconst PageNotFound: FunctionComponent = () => {\n  \n  \treturn (\n\t\t<div className=\"center\">\n\t\t\t<img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\n\t\t\t<h1>Hey, cette page n'existe pas !</h1> \n\t\t\t<Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\n\t\t\t\tRetourner à l'accueil\n\t\t\t</Link>\n\t\t</div>\n\t);\n}\n  \nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react';\nimport Pokemon from '../models/pokemon';\nimport formatType from '../helpers/format-type';\nimport { useHistory } from 'react-router-dom';\nimport PokemonService from '../services/pokemon-service';\n  \ntype Props = {\n    pokemon: Pokemon,\n    isEditForm: boolean\n};\n\n// Modélise un champ dans le formulaire\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean\n};\n\ntype Form = {\n    picture: Field,\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n};\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n  \n    const [form, setForm] = useState<Form>({\n        picture: { value: pokemon.picture },\n        name: { value: pokemon.name, isValid: true},\n        hp: { value: pokemon.hp, isValid: true},\n        cp: { value: pokemon.cp, isValid: true},\n        types: { value: pokemon.types, isValid: true}\n    });\n\n    const history = useHistory();\n\n    const types: string[] = [\n        'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', \n        'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\n    ];\n   \n    const hasType = (type: string): boolean => {\n        return form.types.value.includes(type);\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: { value: fieldValue }};\n\n        setForm({...form, ...newField});\n    }\n\n    const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n        if(checked) {\n            const newTypes: string[] = form.types.value.concat([type]);\n            newField = { value: newTypes };\n        } else {\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n            newField = { value: newTypes};\n        }\n\n        setForm({...form, ...{types: newField}});\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        // Validité du formulaire\n        const isFormValid = validateForm();\n        if(isFormValid){\n            // Enregistrement des modifs dans l'API\n            pokemon.picture = form.picture.value;\n            pokemon.name = form.name.value;\n            pokemon.hp = form.hp.value;\n            pokemon.cp = form.cp.value;\n            pokemon.types = form.types.value;\n            isEditForm ? updatePokemon() : addPokemon();\n        }\n    }\n\n    const addPokemon = () => {\n        PokemonService.addPokemon(pokemon)\n            .then(() => history.push('/')); //Redirection vers la page des pokemons\n    }\n\n    const updatePokemon = () => {\n        PokemonService.updatePokemon(pokemon)\n        .then(() => history.push(`/pokemons/${pokemon.id}`)); //Redirection vers la page du pokemon\n    }\n\n    const isAddForm = () => {\n        return !isEditForm;\n    }\n\n    const validateForm = () => {\n        let newForm: Form = form;\n        // Validator picture\n        if(isAddForm()) {\n            const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\n            const end = \".png\";\n            if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)){\n                const errorMsg: string = \"L'url n'est pas valide\";\n                const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\n                newForm = {...form, ...{ picture: newField }};\n            } else {\n                const newField: Field = { value: form.picture.value, error: '', isValid: true };\n                newForm = {...form, ...{ picture: newField }};\n            }\n        } \n        // Validator name\n        if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\n            const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\n            const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\n            newForm = { ...newForm, ...{ name: newField } };\n        } else {\n            const newField: Field = { value: form.name.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ name: newField } };\n        }\n        // Validator hp\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n            const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\n            newForm = { ...newForm, ...{ hp: newField } };\n        } else {\n            const newField: Field = { value: form.hp.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ hp: newField } };\n        }\n        // Validator cp\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n            const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\n            newForm = { ...newForm, ...{ cp: newField } };\n        } else {\n            const newField: Field = { value: form.cp.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ cp: newField } };\n        }    \n        setForm(newForm);\n        if(isAddForm())\n            return newForm.picture.isValid && newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n    }\n\n    const isTypeValid = (type: string): boolean => {\n        if(form.types.value.length === 1 && hasType(type)){\n            return false;\n        }\n        if(form.types.value.length >= 3 && !hasType(type)){\n            return false;\n        }\n        return true;\n    }\n\n    const deletePokemon = () => {\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n    }\n\n    return (\n        <form onSubmit={e => handleSubmit(e)}>\n            <div className=\"row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <div className=\"card hoverable\"> \n                        {isEditForm && (\n                            <div className=\"card-image\">\n                                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\n                                <span className='btn-floating halfway-fab waves-effect waves-light'>\n                                    <i onClick={deletePokemon} className='material-icons'>delete</i>\n                                </span>\n                            </div>\n                        )}\n                        <div className=\"card-stacked\">\n                            <div className=\"card-content\">\n                                {/* Pokemon picture */}\n                                {isAddForm() && (\n                                    <div className=\"form-group\">\n                                        <label htmlFor=\"picture\">Image</label>\n                                        <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\n                                        {form.picture.error &&\n                                            <div className='card-panel red accent-1'>\n                                                {form.picture.error}\n                                            </div>\n                                        }\n                                    </div>\n                                )}\n                                {/* Pokemon name */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Nom</label>\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\n                                    {form.name.error &&\n                                        <div className='card-panel red accent-1'>\n                                            {form.name.error}\n                                        </div>\n                                    }\n                                </div>\n                                {/* Pokemon hp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"hp\">Point de vie</label>\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\n                                    {form.hp.error &&\n                                        <div className='card-panel red accent-1'>\n                                            {form.hp.error}\n                                        </div>\n                                    }\n                                </div>\n                                {/* Pokemon cp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"cp\">Dégâts</label>\n                                    <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\n                                    {form.cp.error &&\n                                        <div className='card-panel red accent-1'>\n                                            {form.cp.error}\n                                        </div>\n                                    }\n                                </div>\n                                {/* Pokemon types */}\n                                <div className=\"form-group\">\n                                    <label>Types</label>\n                                    {types.map(type => (\n                                        <div key={type} style={{marginBottom: '10px'}}>\n                                            <label>\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypeValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\n                                                <span>\n                                                    <p className={formatType(type)}>{ type }</p>\n                                                </span>\n                                            </label>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                            <div className=\"card-action center\">\n                                {/* Submit button */}\n                                <button type=\"submit\" className=\"btn\">Valider</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n};\n   \nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport Loader from '../components/loader';\nimport PokemonForm from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\nimport PokemonService from '../services/pokemon-service';\n// import POKEMONS from '../models/mock-pokemon';\n \ntype Params = { id: string };\n  \nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\n    \n    const [pokemon, setPokemon] = useState<Pokemon|null>(null);\n  \n    useEffect(() => {\n        // POKEMONS.forEach(pokemon => {\n        //     if (match.params.id === pokemon.id.toString()) {\n        //         setPokemon(pokemon);\n        //     }\n        // })\n        PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon));\n    }, [match.params.id]);\n    \n    return (\n        <div>\n            { pokemon ? (\n                <div className=\"row\">\n                    <h2 className=\"header center\">Éditer { pokemon.name }</h2>\n                    <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\n                </div>\n            ) : (\n                <h4 className=\"center\"><Loader /></h4>\n            )}\n        </div>\n    );\n}\n  \nexport default PokemonEdit;","// Représente un Pokemon\nexport default class Pokemon {\n    // 1. Typage des propiétés d'un pokémon.\n    id: number;\n    hp: number;\n    cp: number;\n    name: string;\n    picture: string;\n    types: Array<string>;\n    created: Date;\n     \n    // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\n    constructor( id: number, \n        hp: number = 100, \n        cp: number = 10, \n        name: string = '...',\n        picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png', \n        types: Array<string> = ['Normal'],\n        created: Date = new Date()) \n    {\n        // 3. Initialisation des propiétés d'un pokémons.\n        this.id = id;\n        this.hp = hp;\n        this.cp = cp;\n        this.name = name;\n        this.picture = picture;\n        this.types = types;\n        this.created = created;\n    }\n}","import React, { FunctionComponent, useState } from 'react';\nimport PokemonFrom from '../components/pokemon-form';\nimport Pokemon from '../models/pokemon';\n\nconst PokemonAdd: FunctionComponent = () => {\n    const [id] = useState<number>(new Date().getTime());\n    const [pokemon] = useState<Pokemon>(new Pokemon(id));\n\n    return (\n        <div className='row'>\n            <h2 className='header center'>Ajouter un pokémon</h2>\n            <PokemonFrom pokemon={pokemon} isEditForm={false}></PokemonFrom>\n        </div>\n    );\n}\n\nexport default PokemonAdd;","export default class AuthenticationService {\n    static isAuthenticated: boolean = false;\n\n    static login(username: string, password: string): Promise<boolean> {\n        const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\n        return new Promise(resolve => {\n            setTimeout(() => {\n                this.isAuthenticated = isAuthenticated;\n                resolve(isAuthenticated);\n            }, 1000);\n        });\n    }\n}","import React, { FunctionComponent, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticationService from '../services/authentication-service';\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean\n};\n\ntype Form = {\n    username: Field,\n    password: Field\n}\n\nconst Login: FunctionComponent = () => {\n\n    const history = useHistory();\n\n    const [form, setForm] = useState<Form>({\n        username: { value: '' },\n        password: { value: '' },\n    });\n\n    const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = { [fieldName]: { value: fieldValue } };\n\n        setForm({ ...form, ...newField});\n    }\n\n    const validateForm = () => {\n        let newForm: Form = form;\n        // Validator username\n        if(form.username.value.length < 3) {\n            const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\n            const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\n            newForm = { ...newForm, ...{ username: newField } };\n        } else {\n            const newField: Field = { value: form.username.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ username: newField } };\n        }\n        // Validator password\n        if(form.password.value.length < 6) {\n            const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\n            const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\n            newForm = { ...newForm, ...{ password: newField } };\n        } else {\n            const newField: Field = { value: form.password.value, error: '', isValid: true };\n            newForm = { ...newForm, ...{ password: newField } };\n        }\n        setForm(newForm);\n        return newForm.username.isValid && newForm.password.isValid;\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const isFormValid = validateForm();\n        if(isFormValid) {\n            setMessage('👉 Tentative de connexion en cours ...');\n            AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\n                if(!isAuthenticated) {\n                    setMessage('🔐 Identifiant ou mot de passe incorrect.');\n                    return;\n                }\n                history.push('/pokemons');\n            });\n        }\n    }\n\n    return (\n        <form onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <div className=\"card hoverable\">\n                        <div className=\"card-stacked\">\n                            <div className=\"card-content\">\n                                {/* Form message */}\n                                {message && <div className=\"form-group\">\n                                    <div className=\"card-panel grey lighten-5\">\n                                        {message}\n                                    </div>\n                                </div>}\n                                {/* Field username */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"username\">Identifiant</label>\n                                    <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\n                                    {/* error */}\n                                    {form.username.error &&\n                                        <div className=\"card-panel red accent-1\"> \n                                            {form.username.error} \n                                        </div>\n                                    } \n                                </div>\n                                {/* Field password */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Mot de passe</label>\n                                    <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\n                                    {/* error */}\n                                    {form.password.error &&\n                                        <div className=\"card-panel red accent-1\"> \n                                            {form.password.error} \n                                        </div>\n                                    } \n                                </div>\n                            </div>\n                            <div className=\"card-action center\">\n                                {/* Submit button */}\n                                <button type=\"submit\" className=\"btn\">Valider</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n};\n \nexport default Login;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthenticationService from './services/authentication-service';\n  \nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\n    <Route {...rest} render={(props) => {\n        const isAuthenticated = AuthenticationService.isAuthenticated;\n        if (!isAuthenticated) {    \n            return <Redirect to={{ pathname: '/login' }} />\n        }\n    \n        return <Component {...props} />\n    }} />\n);\n  \nexport default PrivateRoute;","// Importation du module REACT\nimport React, { FunctionComponent } from 'react';\nimport PokemonList from './pages/pokemon-list';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport PokemonsDetail from './pages/pokemon-detail';\nimport PageNotFound from './pages/page-not-found';\nimport PokemonEdit from './pages/pokemon-edit';\nimport PokemonAdd from './pages/pokemon-add';\nimport Login from './pages/login';\nimport PrivateRoute from './PrivateRoute';\n\n// Typage du composant App avec le type React.FunctionComponent\nconst App: FunctionComponent = () => {\n\n    return (\n        <Router>\n            <div>\n                { /* Barre de navigation */}\n                <nav>\n                    <div className='nav-wrapper teal'>\n                        <Link to='/' className='brand-logo center'>Pokédex</Link>\n                    </div>\n                </nav>\n                { /* Système de gestion des routes */}\n                <Switch>\n                    <PrivateRoute exact path='/' component={PokemonList} />\n                    <Route exact path=\"/login\" component={Login} />\n                    <PrivateRoute exact path='/pokemons' component={PokemonList} />\n                    <PrivateRoute exact path='/pokemons/add' component={PokemonAdd} />\n                    <PrivateRoute path='/pokemons/edit/:id' component={PokemonEdit} />\n                    <PrivateRoute path='/pokemons/:id' component={PokemonsDetail} />\n                    { /* Interception des pages non prises en charges */}\n                    <Route component={PageNotFound} />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\n\n// Permet d'exporter le composant pour qu'il soit utilisable dans le projet\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// React démarre l'application en injectant notre composant App dans l'élément root \n// root est défini dans le fichier index.html\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}